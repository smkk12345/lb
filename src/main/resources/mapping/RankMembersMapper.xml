<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.longbei.appservice.dao.RankMembersMapper" >
  <resultMap id="BaseResultMap" type="com.longbei.appservice.entity.RankMembers" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="rankid" property="rankid" jdbcType="BIGINT" />
    <result column="userid" property="userid" jdbcType="BIGINT" />
    <result column="createtime" property="createtime" jdbcType="TIMESTAMP" />
    <result column="updatetime" property="updatetime" jdbcType="TIMESTAMP" />
    <result column="sortnum" property="sortnum" jdbcType="INTEGER" />
    <result column="iswinning" property="iswinning" jdbcType="CHAR" />
    <result column="icount" property="icount" jdbcType="INTEGER" />
    <result column="likes" property="likes" jdbcType="INTEGER" />
    <result column="complaintotalcount" property="complaintotalcount" jdbcType="INTEGER" />
    <result column="flowers" property="flowers" jdbcType="INTEGER" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="acceptaward" property="acceptaward" jdbcType="CHAR" />
    <result column="isfashionman" property="isfashionman" jdbcType="CHAR" />
    <result column="checkstatus" property="checkstatus" jdbcType="CHAR" />
    <result column="checkresult" property="checkresult" jdbcType="VARCHAR" />
    <result column="checkuserid" property="checkuserid" jdbcType="VARCHAR" />
    <result column="receivecode" property="receivecode" jdbcType="VARCHAR" />
    <result column="checkdate" property="checkdate" jdbcType="TIMESTAMP" />
    <result column="publishawarddate" property="publishawarddate" jdbcType="TIMESTAMP" />
    <association property="rankAward" javaType="com.longbei.appservice.entity.RankAward">
      <result column="awardid" property="awardid" jdbcType="VARCHAR" />
      <result column="awardlevel" property="awardlevel" jdbcType="VARCHAR" />
      <result column="awardprice" property="awardprice" jdbcType="DOUBLE" />
      <result column="awardphotos" property="awardphotos" jdbcType="VARCHAR" />
      <result column="awardtype" property="awardtype" jdbcType="VARCHAR" />
    </association>
  </resultMap>
  <sql id="Base_Column_List" >
      id, rankid, userid, createtime, updatetime, sortnum, iswinning, icount,
    likes, flowers, status, acceptaward, isfashionman,complaintotalcount,checkstatus,
    checkresult,checkuserid,checkdate,awardid,awardlevel,receivecode,publishawarddate
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from rank_members
    where id = #{id,jdbcType=INTEGER}
  </select>


  <select id="selectCount" parameterType="com.longbei.appservice.entity.RankMembers" resultType="java.lang.Integer">
    select
        count(1)
    from rank_members
    <where>
        <if test="isfashionman != null">
          isfashionman = #{isfashionman}
        </if>
        <if test="checkstatus != null">
          <choose>
            <when test="checkstatus == '2'.toString()">
              AND (checkstatus = '2' OR checkstatus = '3')
            </when>
            <when test="checkstatus == '-1'.toString()">
              AND (checkstatus != '0')
            </when>
            <otherwise>
              AND checkstatus = #{checkstatus}
            </otherwise>
          </choose>
        </if>
        <if test="appUserMongoEntities != null and appUserMongoEntities.size() > 0">
          AND  userid in
          <foreach item="item" index="index" collection="appUserMongoEntities" open="(" separator="," close=")">
            #{item.id}
          </foreach>
        </if>
        AND status = '1'
      <if test="rankid != null">
        and rankid=#{rankid}
      </if>
      <if test="userid != null">
        and userid=#{userid}
      </if>
    </where>
  </select>


  <select id="selectList" resultMap="BaseResultMap">
    SELECT
      <include refid="Base_Column_List" />
    FROM rank_members
    <where>
        <if test="rankmember.isfashionman != null">
          AND isfashionman = #{rankmember.isfashionman}
        </if>
        <if test="rankmember.checkstatus != null">
          <choose>
            <when test="rankmember.checkstatus == '2'.toString()">
              AND (checkstatus = '2' OR checkstatus = '3')
            </when>
            <when test="rankmember.checkstatus == '-1'.toString()">
              AND (checkstatus != '0')
            </when>
            <otherwise>
              AND checkstatus = #{rankmember.checkstatus}
            </otherwise>
          </choose>
        </if>
        <if test="rankmember.appUserMongoEntities != null and rankmember.appUserMongoEntities.size() > 0">
          AND  userid in
          <foreach item="item" index="index" collection="rankmember.appUserMongoEntities" open="(" separator="," close=")">
            #{item.id}
          </foreach>
        </if>
        AND status = '1'
        <if test="rankmember.rankid != null">
          and rankid=#{rankmember.rankid}
        </if>

    </where>
    ORDER BY sortnum DESC ,likes DESC
    <if test="startno != null">
      limit #{startno},#{pagesize}
    </if>
  </select>


  <!--<select id="selectRankAcceptAwardCount" parameterType="com.longbei.appservice.entity.RankMembers" resultType="java.lang.Integer">-->
    <!--SELECT-->
      <!--count(*)-->
    <!--FROM rank_members-->
    <!--<where>-->
      <!--<if test="receivecode != null">-->
        <!--AND receivecode=#{receivecode}-->
      <!--</if>-->
      <!--<if test="spublishawarddate != null" >-->
        <!--AND publishawarddate &gt;= #{spublishawarddate}-->
      <!--</if>-->
      <!--<if test="epublishawarddate != null" >-->
        <!--AND publishawarddate &lt; #{epublishawarddate}-->
      <!--</if>-->
      <!--<if test="appUserMongoEntities != null and appUserMongoEntities.size() > 0">-->
        <!--AND  userid in-->
        <!--<foreach item="item" index="index" collection="appUserMongoEntities" open="(" separator="," close=")">-->
          <!--#{item.id}-->
        <!--</foreach>-->
      <!--</if>-->
      <!--AND status = '1'-->
      <!--<if test="ranks != null and ranks.size() > 0">-->
        <!--AND  rankid in-->
        <!--<foreach item="item" index="index" collection="ranks" open="(" separator="," close=")">-->
          <!--#{item.rankid}-->
        <!--</foreach>-->
      <!--</if>-->
      <!--<if test="awards != null and awards.size() > 0">-->
        <!--AND  awardid in-->
        <!--<foreach item="item" index="index" collection="awards" open="(" separator="," close=")">-->
          <!--#{item.id}-->
        <!--</foreach>-->
      <!--</if>-->

    <!--</where>-->
  <!--</select>-->

  <!--<select id="selectRankAcceptAwardList" resultMap="BaseResultMap">-->
    <!--SELECT-->
    <!--<include refid="Base_Column_List" />-->
    <!--FROM rank_members-->
    <!--<where>-->
      <!--<if test="rankmember.receivecode != null">-->
        <!--AND receivecode=#{rankmember.receivecode}-->
      <!--</if>-->
      <!--<if test="rankmember.spublishawarddate != null" >-->
        <!--AND publishawarddate &gt;= #{rankmember.spublishawarddate}-->
      <!--</if>-->
      <!--<if test="rankmember.epublishawarddate != null" >-->
        <!--AND publishawarddate &lt; #{rankmember.epublishawarddate}-->
      <!--</if>-->
      <!--<if test="rankmember.appUserMongoEntities != null and rankmember.appUserMongoEntities.size() > 0">-->
        <!--AND  userid in-->
        <!--<foreach item="item" index="index" collection="rankmember.appUserMongoEntities" open="(" separator="," close=")">-->
          <!--#{item.id}-->
        <!--</foreach>-->
      <!--</if>-->
      <!--AND status = '1'-->
      <!--<if test="rankmember.ranks != null and rankmember.ranks.size() > 0">-->
        <!--AND  rankid in-->
        <!--<foreach item="item" index="index" collection="rankmember.ranks" open="(" separator="," close=")">-->
          <!--#{item.rankid}-->
        <!--</foreach>-->
      <!--</if>-->
      <!--<if test="rankmember.awards != null and rankmember.awards.size() > 0">-->
        <!--AND  awardid in-->
        <!--<foreach item="item" index="index" collection="rankmember.awards" open="(" separator="," close=")">-->
          <!--#{item.id}-->
        <!--</foreach>-->
      <!--</if>-->

    <!--</where>-->
    <!--ORDER BY sortnum DESC ,likes DESC-->
    <!--<if test="startno != null">-->
      <!--limit #{startno},#{pagesize}-->
    <!--</if>-->
  <!--</select>-->


  <select id="selectWaitCheckList" resultMap="BaseResultMap">
    SELECT *
      FROM
    (SELECT <include refid="Base_Column_List" /> FROM rank_members
    WHERE rankid=#{rankmember.rankid} AND status = '1' AND checkstatus = '0' limit #{totalcount}) temp
    WHERE 1=1
    <if test="rankmember.isfashionman != null">
      AND temp.isfashionman = #{rankmember.isfashionman}
    </if>
    <if test="rankmember.appUserMongoEntities != null">
      AND  temp.userid in
      <foreach item="item" index="index" collection="rankmember.appUserMongoEntities" open="(" separator="," close=")">
        #{item.id}
      </foreach>
    </if>
    ORDER BY temp.sortnum DESC ,temp.likes DESC
    <if test="startno != null">
      limit #{startno},#{pagesize}
    </if>
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from rank_members
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.longbei.appservice.entity.RankMembers" >
    insert into rank_members (id, rankid, userid, 
      createtime, updatetime,
      sortnum, iswinning, icount,
      likes, flowers,status,
      acceptaward, isfashionman)
    values (#{id,jdbcType=INTEGER}, #{rankid,jdbcType=BIGINT}, #{userid,jdbcType=BIGINT}, 
      #{createtime,jdbcType=TIMESTAMP}, #{updatetime,jdbcType=TIMESTAMP},
      #{sortnum,jdbcType=INTEGER}, #{iswinning,jdbcType=CHAR}, #{icount,jdbcType=INTEGER},
      #{likes,jdbcType=INTEGER}, #{flowers,jdbcType=INTEGER},#{status,jdbcType=INTEGER},
      #{acceptaward,jdbcType=CHAR}, #{isfashionman,jdbcType=CHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.longbei.appservice.entity.RankMembers">
    insert into rank_members
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="rankid != null" >
        rankid,
      </if>
      <if test="userid != null" >
        userid,
      </if>
      <if test="createtime != null" >
        createtime,
      </if>
      <if test="updatetime != null" >
        updatetime,
      </if>
      <if test="sortnum != null" >
        sortnum,
      </if>
      <if test="iswinning != null" >
        iswinning,
      </if>
      <if test="icount != null" >
        icount,
      </if>
      <if test="likes != null" >
        likes,
      </if>
      <if test="flowers != null" >
        flowers,
      </if>
      <if test="acceptaward != null" >
        acceptaward,
      </if>
      <if test="isfashionman != null" >
        isfashionman,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="rankid != null" >
        #{rankid,jdbcType=BIGINT},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=BIGINT},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null" >
        #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="sortnum != null" >
        #{sortnum,jdbcType=INTEGER},
      </if>
      <if test="iswinning != null" >
        #{iswinning,jdbcType=CHAR},
      </if>
      <if test="icount != null" >
        #{icount,jdbcType=INTEGER},
      </if>
      <if test="likes != null" >
        #{likes,jdbcType=INTEGER},
      </if>
      <if test="flowers != null" >
        #{flowers,jdbcType=INTEGER},
      </if>
      <if test="acceptaward != null" >
        #{acceptaward,jdbcType=CHAR},
      </if>
      <if test="isfashionman != null" >
        #{isfashionman,jdbcType=CHAR},
      </if>
      <if test="status != null" >
        #{status},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.longbei.appservice.entity.RankMembers" >
    update rank_members
    <set >
      <if test="rankid != null" >
        rankid = #{rankid,jdbcType=BIGINT},
      </if>
      <if test="userid != null" >
        userid = #{userid,jdbcType=BIGINT},
      </if>
      <if test="createtime != null" >
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="updatetime != null" >
        updatetime = #{updatetime,jdbcType=TIMESTAMP},
      </if>
      <if test="sortnum != null" >
        sortnum = #{sortnum,jdbcType=INTEGER},
      </if>
      <if test="iswinning != null" >
        iswinning = #{iswinning,jdbcType=CHAR},
      </if>
      <if test="icount != null" >
        icount = #{icount,jdbcType=INTEGER},
      </if>
      <if test="likes != null" >
        likes = #{likes,jdbcType=INTEGER},
      </if>
      <if test="flowers != null" >
        flowers = #{flowers,jdbcType=INTEGER},
      </if>
      <if test="acceptaward != null" >
        acceptaward = #{acceptaward,jdbcType=CHAR},
      </if>
      <if test="isfashionman != null" >
        isfashionman = #{isfashionman,jdbcType=CHAR},
      </if>
      <if test="status != null" >
        status = #{status},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.longbei.appservice.entity.RankMembers" >
    update rank_members
    set rankid = #{rankid,jdbcType=BIGINT},
      userid = #{userid,jdbcType=BIGINT},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      updatetime = #{updatetime,jdbcType=TIMESTAMP},
      sortnum = #{sortnum,jdbcType=INTEGER},
      iswinning = #{iswinning,jdbcType=CHAR},
      icount = #{icount,jdbcType=INTEGER},
      likes = #{likes,jdbcType=INTEGER},
      flowers = #{flowers,jdbcType=INTEGER},
      acceptaward = #{acceptaward,jdbcType=CHAR},
      isfashionman = #{isfashionman,jdbcType=CHAR},
      status =#{status}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <!-- 根据用户id和榜单id查询榜单 -->
  <select id="selectByRankIdAndUserId" resultMap="BaseResultMap">
    select
        <include refid="Base_Column_List" />
    from
        rank_members
    where
        rankid = #{rankid}
      and userid = #{userid}
  </select>

  <!-- 更改榜单中的用户数量 -->
  <update id="updateRankMemberCount">
      update
        rank_members
      set
        rankinvolved = rankinvolved + #{count}
      where rankid = #{rankId}
  </update>

  <!-- 更新rank -->
  <update id="updateRank" parameterType="map">
    update
        rank_members
    <set>
        <if test="status != null">
            status = #{status},
        </if>
        <if test="initRankMember != null and initRankMember">
          icount =0,
          likes =0,
          flowers =0,
        </if>
        <if test="sortNum != null">
            sortnum = #{sortNum},
        </if>
        <if test="checkstatus != null">
            checkstatus = #{checkstatus},
        </if>
        <if test="acceptaward != null">
            acceptaward = #{acceptaward},
        </if>
    </set>
    where userid = #{userId} and rankid = #{rankId}
  </update>

  <update id="updateRankMemberState" parameterType="com.longbei.appservice.entity.RankMembers">
    UPDATE
      rank_members
    <set>
      <if test="iswinning != null">
        iswinning = #{iswinning},
      </if>
      <if test="rankAward != null">
        <if test="rankAward.awardid != null">
          awardid = #{rankAward.awardid},
        </if>
        <if test="rankAward.awardlevel != null">
          awardlevel = #{rankAward.awardlevel},
        </if>
      </if>
      <if test="isfashionman != null">
        isfashionman = #{isfashionman},
      </if>
      <if test="checkstatus != null">
        checkstatus = #{checkstatus},
      </if>
      <if test="checkuserid != null">
        checkuserid = #{checkuserid},
      </if>
      <if test="checkdate != null">
        checkdate = #{checkdate},
      </if>
      <if test="isfashionman != null">
        isfashionman = #{isfashionman},
      </if>
      <if test="checkresult != null">
        checkresult = #{checkresult},
      </if>
      <if test="status != null">
        status = #{status},
      </if>
      <if test="receivecode != null">
        receivecode = #{receivecode},
      </if>
      <if test="updatetime != null">
        updatetime = #{updatetime},
      </if>
      <if test="icount">
        icount = icount+#{icount}
      </if>
    </set>
    where rankid = #{rankid} and userid = #{userid}
  </update>


  <update id="updateRankImproveCount">
    UPDATE rank_members
      set icount = icount+#{icount}
    where rankid=#{rankid}
    and userid=#{userid}
  </update>

  <!-- 获取用户在榜单中的排名 -->
  <select id="selectUserSort" resultMap="BaseResultMap">
      select
          <include refid="Base_Column_List" />
      from
        rank_members
      <where>
        rankId = #{rankId}
      </where>
      <if test="sortType == 1">
        order by likes desc
      </if>
      <if test="sortType == 2">
        order by flowers desc
      </if>
      <if test="sortType == 0">
          order by sortnum asc
      </if>
      <if test="startNum != null">
          limit #{startNum},#{pageSize}
      </if>
  </select>

  <!-- 审核用户的进步条数 -->
  <update id="instanceRankMember" parameterType="map">
      update rank_members
      <set> checkstatus = #{status}
        <if test="checkresult != null">
          ,checkresult = #{checkresult}
        </if>
      </set>
      WHERE
          <if test="type != null and type == 'less'">
            icount &lt; #{minImproveNum}
          </if>
          <if test="type != null and type == 'greater'">
            icount >= #{minImproveNum}
          </if>
          and rankid = #{rankId}
  </update>

  <!-- 根据条件查询 rankMembers -->
  <select id="selectRankMembers" parameterType="map" resultMap="BaseResultMap">
      SELECT
        <include refid="Base_Column_List" />
      from rank_members
      <where>
          <if test="isFashionMan != null">
              isfashionman = 1
          </if>
          <if test="status != null">
              and status = #{status}
          </if>
          <if test="rankId != null">
              and rankid = #{rankId}
          </if>
          <if test="userId != null">
            and userid = #{userId}
          </if>
      </where>
      <if test="orderType != null and orderType == 'updateTimeDesc'">
          order by updatetime desc
      </if>
      <if test="startNum != null">
          limit #{startNum},#{pageSize}
      </if>
  </select>

  <!-- 查看已结束的榜单的获奖情况 -->
  <select id="selectAwardMemberList" parameterType="LONG" resultMap="com.longbei.appservice.dao.RankAwardReleaseMapper.BaseResultMap">
    select
        userid ,
        award.id awardid,
        award.awardtitle awardnickname,
        rank_members.awardlevel,
        count(1) awardrate
    from
        rank_members,
        award
    where award.id= rank_members.awardid
      and iswinning = 1
      and rankid = #{rankid}
    group by awardlevel
    order by awardlevel
  </select>

  <select id="rankMemberAwardList" parameterType="LONG" resultMap = "com.longbei.appservice.dao.RankAwardReleaseMapper.BaseResultMap">
      select
        rank_members.userid,
        rank_members.awardlevel,
        rank_members.awardid,
        award.awardprice,
        award.awardphotos,
        award.awardtitle awardnickname
    from
        rank_members,
        award
    where
        rank_members.awardid = award.id
      and rank_members.rankid =#{rankid}
    order by rank_members.awardlevel
  </select>

  <!-- 获取可以挤走的榜成员 -->
  <select id="getSureRemoveRankMemberCount" parameterType="map" resultType="INTEGER">
      select
        count(1)
      from
        rank_members
      where
        updatetime &lt; #{lastUpdateTime}
      and status = 1
      and icount = 0
      and rankid = #{rankId}
  </select>

  <!-- 移除超时未发布进步的榜成员 -->
  <update id="removeOverTimeRankMember" parameterType="map">
      update
      rank_members
      set status = 2
      where id in (
          select * from (
            select
            temp.id
            from
            rank_members temp
            where
            temp.updatetime &lt; #{lastUpdateTime}
            and temp.status = 1
            and temp.icount = 0
            and temp.rankid = #{rankId}
            order by temp.updatetime limit 1
          ) foo
    )
  </update>
</mapper>